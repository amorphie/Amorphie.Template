{
    "Workflow Mapping Template": {
        "prefix": ["wfmapping", "mapping-template"],
        "body": [
            "#load \"../../template/src/ScriptGlobals.csx\"",
            "",
            "using System;",
            "using System.Collections.Generic;",
            "using System.Threading.Tasks;",
            "using BBT.Workflow.Scripting;",
            "using BBT.Workflow.Definitions;",
            "using BBT.Workflow.Scripting.Functions;",
            "",
            "/// <summary>",
            "/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} mapping for workflow task processing",
            "/// </summary>",
            "public class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} : ScriptBase, IMapping",
            "{",
            "    /// <summary>",
            "    /// Handles input processing for the workflow task",
            "    /// </summary>",
            "    /// <param name=\"task\">The workflow task being executed</param>",
            "    /// <param name=\"context\">Script context containing workflow data</param>",
            "    /// <returns>Script response with processed input data</returns>",
            "    public async Task<ScriptResponse> InputHandler(WorkflowTask task, ScriptContext context)",
            "    {",
            "        var response = new ScriptResponse();",
            "        ",
            "        // TODO: Implement input processing logic",
            "        response.Data = new ",
            "        {",
            "            // Add your input data here",
            "            $1",
            "        };",
            "",
            "        // TODO: Set custom headers if needed",
            "        response.Headers = new Dictionary<string, string>",
            "        {",
            "            // Add custom headers here",
            "        };",
            "",
            "        return response;",
            "    }",
            "",
            "    /// <summary>",
            "    /// Handles output processing for the workflow task",
            "    /// </summary>",
            "    /// <param name=\"context\">Script context containing workflow data and results</param>",
            "    /// <returns>Script response with processed output data</returns>",
            "    public async Task<ScriptResponse> OutputHandler(ScriptContext context)",
            "    {",
            "        var response = new ScriptResponse();",
            "        ",
            "        // TODO: Process the response based on context.Body",
            "        if (context.Body.StatusCode != null)",
            "        {",
            "            var statusCode = (int)context.Body.StatusCode;",
            "            ",
            "            if (statusCode == 200)",
            "            {",
            "                // Success",
            "                response.Data = new ",
            "                {",
            "                    success = true,",
            "                    result = context.Body.Data,",
            "                    processedAt = DateTime.UtcNow",
            "                };",
            "            }",
            "            else",
            "            {",
            "                // Error handling",
            "                response.Data = new ",
            "                {",
            "                    success = false,",
            "                    error = context.Body.ErrorMessage ?? \"Unknown error\",",
            "                    statusCode = statusCode",
            "                };",
            "            }",
            "        }",
            "",
            "        return response;",
            "    }",
            "}"
        ],
        "description": "Creates a complete workflow mapping class template with automatic class naming"
    },
    "Workflow Rule Template": {
        "prefix": ["wfrule", "rule-template"],
        "body": [
            "#load \"../../template/src/ScriptGlobals.csx\"",
            "",
            "using System.Threading.Tasks;",
            "using BBT.Workflow.Scripting;",
            "",
            "/// <summary>",
            "/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} rule for workflow condition evaluation",
            "/// </summary>",
            "public class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} : IConditionMapping",
            "{",
            "    /// <summary>",
            "    /// Evaluates the condition for workflow transition",
            "    /// </summary>",
            "    /// <param name=\"context\">Script context containing workflow data</param>",
            "    /// <returns>True if condition is met, false otherwise</returns>",
            "    public async Task<bool> Handler(ScriptContext context)",
            "    {",
            "        // TODO: Implement your condition logic here",
            "        $1",
            "        ",
            "        return false; // Change this to your actual condition",
            "    }",
            "}"
        ],
        "description": "Creates a workflow rule class template with automatic class naming"
    },
    "Script Base Template": {
        "prefix": ["wfscript", "script-base"],
        "body": [
            "#load \"../../template/src/ScriptGlobals.csx\"",
            "",
            "using System.Threading.Tasks;",
            "using BBT.Workflow.Scripting;",
            "using BBT.Workflow.Scripting.Functions;",
            "",
            "/// <summary>",
            "/// ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} script for workflow processing",
            "/// </summary>",
            "public class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} : ScriptBase",
            "{",
            "    /// <summary>",
            "    /// Main execution method",
            "    /// </summary>",
            "    /// <param name=\"context\">Script context containing workflow data</param>",
            "    /// <returns>Processing result</returns>",
            "    public async Task<object> Execute(ScriptContext context)",
            "    {",
            "        // TODO: Implement your script logic here",
            "        $1",
            "        ",
            "        return new { success = true };",
            "    }",
            "}"
        ],
        "description": "Creates a basic script class template with ScriptBase inheritance"
    }
} 